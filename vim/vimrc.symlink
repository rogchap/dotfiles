" basic settings
filetype plugin indent on
syntax on
set colorcolumn=120
set backspace=indent,eol,start
set encoding=utf-8
set fileencoding=utf-8
set exrc
set secure
set undofile
set clipboard+=unnamed
set pyxversion=3
set autowrite
set cursorline
set cmdheight=2
set nocompatible
set autoread
set signcolumn=yes

" term colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

" folding
set foldmethod=indent
set foldcolumn=1
set nofoldenable
au BufRead * normal zR

" redirect temp files
set undodir=~/.vim/undodir
set backupdir=~/.vim/backupdir
set directory=~/.vim/directory

" remove delay for escape in insert mode
augroup escape
    autocmd!
    autocmd InsertEnter * set timeoutlen=0
    autocmd InsertLeave * set timeoutlen=1000
augroup END
set ttimeoutlen=0

" show line numbers
set number
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
augroup END

" theme styling
let g:nord_cursor_line_number_background = 1
let g:nord_italic = 1
let g:nord_italic_comments = 1
colorscheme nord

" show matching parenthesis
set showmatch

" change the leader key to space
let mapleader=" "

" store history
set hidden
set history=100

" smarter indenting
set nowrap
set tabstop=4
set shiftwidth=4
set expandtab
set smartindent
set autoindent

" change cursor based on mode
let &t_SI .= "\<Esc>[6 q"
let &t_EI .= "\<Esc>[2 q"
autocmd VimLeave * silent !echo -ne "\033[2 q"

" highlight words when searching
set hlsearch
let g:CoolTotalMatches = 1
" escape search highlight
nnoremap <esc> :noh<return><esc>
" needed so that vim still understands escape sequences
nnoremap <esc>^[ <esc>^[

" lightline setting
set laststatus=2
set noshowmode
let g:lightline = { 'colorscheme': 'nord', 'component_function': { 'filename': 'LLfilename' } }
function! LLfilename()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%') 
endfunction

" fuzzy finding
set rtp+=/usr/local/opt/fzf
nnoremap <Leader>t :FZF<CR>
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
let g:ackprg = 'ag --vimgrep'
nnoremap <Leader>f :Ag<CR>
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>, fzf#vim#with_preview({ 'options': [] },'right:50%', '?'), <bang>0)
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'String', 'rounded': v:false } }

" vim-go settings

let g:go_gopls_enabled = 0
let g:go_imports_cmd = 'gopls'
let g:go_gopls_options=['-remote=auto']
let g:go_imports_autosave = 1
let g:go_auto_type_info = 0
let g:go_template_autocreate = 0
let g:go_template_use_pkg = 1
let g:go_decls_mode = 'fzf'
let g:go_def_mapping_enabled = 0
nnoremap <Leader>b :GoBuild<CR>
nnoremap <Leader>a :GoAlternate<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

" coc.nvim settings
set nobackup
set nowritebackup
set shortmess+=c
imap <c-@> <c-space>
inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
nmap <leader><cr> <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)

autocmd CursorHold * silent call CocActionAsync('doHover')

" autocmd BufWritePre *.go silent call CocAction('runCommand', 'editor.action.organizeImport')

" spell checking completion
set complete=.,w,b,u,t,i,kspell

" snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" text wrap for markdown
au BufRead,BufNewFile *.md setlocal textwidth=120

" debugger key mappings
let g:vimspector_enable_mappings = 'HUMAN'

" smooth scrolling
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" shortcut to open the previous file
nnoremap <Leader><Leader> :e#<CR>

" disable arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

imap <ESC>oA <Nop>
imap <ESC>oB <Nop>
imap <ESC>oC <Nop>
imap <ESC>oD <Nop>

" placing at the EOF so it does not get overriden
set showcmd
